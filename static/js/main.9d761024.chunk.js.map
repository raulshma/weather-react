{"version":3,"sources":["Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","useState","current","setCurrent","useCurrentPosition","position","error","useEffect","a","fetch","body","JSON","stringify","lat","coords","latitude","lon","longitude","method","headers","response","ok","json","data","alert","getCurrentWeather","className","message","name","sys","country","Math","round","main","temp","Date","dt","toLocaleString","src","weather","icon","alt","description","feels_like","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"kRAiFeA,MA7Ef,WAAoB,IAAD,EACaC,qBADb,mBACVC,EADU,KACDC,EADC,OAESC,+BAFT,mBAEVC,EAFU,KAEAC,EAFA,KA0BjB,OAtBAC,qBAAU,WAmBJF,IAAaC,GAlBM,uCAAG,8BAAAE,EAAA,sEACDC,MAAM,uCAAwC,CACnEC,KAAMC,KAAKC,UAAU,CACnBC,IAAKR,EAASS,OAAOC,SACrBC,IAAKX,EAASS,OAAOG,YAEvBC,OAAQ,OACRC,QAAS,CACP,eAAgB,sBARI,YAClBC,EADkB,QAWXC,GAXW,iCAYHD,EAASE,OAZN,OAYhBC,EAZgB,OAatBpB,EAAWoB,GAbW,wBAetBC,MAAM,8BAfgB,4CAAH,oDAkBCC,KACvB,CAACpB,EAAUC,IAEVA,EACK,uBAAGoB,UAAU,WAAWpB,EAAMqB,UAGjCtB,GAAaC,IAAWJ,EAK5B,yBAAKwB,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,sBACb,4BACGxB,EAAQ0B,KADX,KACmB1B,EAAQ2B,IAAIC,SAE/B,8BAAOC,KAAKC,MAAM9B,EAAQ+B,KAAKC,MAA/B,WAEF,4BAAK,IAAIC,KAAkB,IAAbjC,EAAQkC,IAAWC,mBAEnC,yBAAKX,UAAU,sBACb,yBACEY,IAAG,4CAAuCpC,EAAQqC,QAAQ,GAAGC,KAA1D,QACHC,IAAKvC,EAAQqC,QAAQ,GAAGG,cAE1B,6BACE,8BAAOxC,EAAQqC,QAAQ,GAAGN,MAC1B,8BAAO/B,EAAQqC,QAAQ,GAAGG,gBAIhC,yBAAKhB,UAAU,iBACb,4CAAkBK,KAAKC,MAAM9B,EAAQ+B,KAAKU,YAA1C,YA3BG,uBAAGjB,UAAU,WAAb,0B,MCvBIkB,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvD,GACLwD,QAAQxD,MAAMA,EAAMqB,a","file":"static/js/main.9d761024.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useCurrentPosition } from 'react-use-geolocation';\nimport './Weather.css';\n\nfunction Weather() {\n  const [current, setCurrent] = useState();\n  const [position, error] = useCurrentPosition();\n\n  useEffect(() => {\n    const getCurrentWeather = async () => {\n      const response = await fetch('http://localhost:5000/api/v1/weather', {\n        body: JSON.stringify({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        }),\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setCurrent(data);\n      } else {\n        alert('Failed to get weather info');\n      }\n    };\n    if (position && !error) getCurrentWeather();\n  }, [position, error]);\n\n  if (error) {\n    return <p className=\"loading\">{error.message}</p>;\n  }\n\n  if ((!position && !error) || !current) {\n    return <p className=\"loading\">Allow location access</p>;\n  }\n\n  return (\n    <div className=\"weather\">\n      <div className=\"header\">\n        <div className=\"weather__name\">\n          <div className=\"weather__name-temp\">\n            <h1>\n              {current.name}, {current.sys.country}\n            </h1>\n            <span>{Math.round(current.main.temp)} &deg;C</span>\n          </div>\n          <h2>{new Date(current.dt * 1000).toLocaleString()}</h2>\n        </div>\n        <div className=\"weather__condition\">\n          <img\n            src={`https://openweathermap.org/img/wn/${current.weather[0].icon}.png`}\n            alt={current.weather[0].description}\n          ></img>\n          <div>\n            <span>{current.weather[0].main}</span>\n            <span>{current.weather[0].description}</span>\n          </div>\n        </div>\n      </div>\n      <div className=\"weather__temp\">\n        <span>Feels Like {Math.round(current.main.feels_like)} &deg;C</span>\n      </div>\n      {/* \n      <div className=\"weather__wind-cloud\">\n        <span>Speed: {current.wind.speed} m/s</span>\n        <span>Degree: {current.wind.deg}</span>\n        <span>Gust: {current.wind.gust} m/s</span>\n        <span>Cloudiness: {current.clouds.all}</span>\n      </div>\n      <div className=\"weather__extras\">\n        <span>Pressure: {current.main.pressure} hPa</span>\n        <span>Humidity: {current.main.humidity}%</span>\n        <span>Sea Level: {current.main.sea_level}</span>\n        <span>Ground Level: {current.main.grnd_level}</span>\n      </div> */}\n    </div>\n  );\n}\n\nexport default Weather;\n","import React from 'react';\nimport Weather from './Weather';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Weather />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}